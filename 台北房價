# #############################################################################
# 本題參數設定，請勿更改
seed = 0   # 亂數種子數  
# #############################################################################
import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd 
from sklearn.model_selection import train_test_split
# TODO

# 讀取台北市房價資料集
# TODO
data = pd.read_csv('Taipei_house.csv')
df = data.copy()
print(df.columns)
# 對"行政區"進行 one-hot encoding
# TODO                                                                 1111111
df = pd.get_dummies(df, columns=['行政區'],drop_first=False)           #vvvvvvvvvvvvvvvvvv

# 處理"車位類別" 
# TODO                                                            2222222222
for i in range(len(df['車位類別'])):
    if df.loc[i,'車位類別'] == '無':
        df.loc[i,'車位類別'] = 0
    else:
        df.loc[i,'車位類別'] = 1
#簡單寫: df['車位類別'] = df['車位類別'].apply(lambda x:0 if x=='無' else 1)   # vvvvvvvvvvvvvvvvv


# 計算 Adjusted R-squared
def adj_R2(r2, n, k):
    """ 函式描述：計算 Adjusted R-squared
    參數：
        r2:R-squared 數值
        n: 樣本數
        k: 特徵數

    回傳：
        Adjusted R-squared
    """
    return r2-(k-1)/(n-k)*(1-r2)

# TODO



# 切分訓練集(80%)、測試集(20%)
features= ['土地面積', '建物總面積', '屋齡', '樓層', '總樓層', '用途', 
           '房數', '廳數', '衛數', '電梯', '車位類別', 
           '行政區_信義區', '行政區_大安區', '行政區_文山區','行政區_松山區']
target = '總價'  
# TODO                                                            333333333333333
X = df[features]
y = df[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=seed)


# 複迴歸(參數皆為預設值)
# #########################################################################
# '行政區_信義區', '行政區_大安區', '行政區_文山區','行政區_松山區' 四個特徵是經過
# one-hot encoding 後產生，若欄位名稱不同可自行修改之。
# #########################################################################
from sklearn import linear_model
# TODO                                                                       444444444444444444444複迴歸
multi = linear_model.LinearRegression()

# 脊迴歸(Ridge regression)，除以下參數設定外，其餘為預設值                        
# #########################################################################
# alpha=10
# #########################################################################
# TODO                                                                       55555555555555555555555脊迴歸
ridge = linear_model.Ridge(alpha=10)                                   
# 多項式迴歸，除以下參數設定外，其餘為預設值
# #########################################################################
# degree=2
# #########################################################################
from sklearn.preprocessing import PolynomialFeatures                          #  6666666666666666666666666666多項式迴歸
# TODO
X_train_py = PolynomialFeatures(degree=2).fit_transform(X_train)
X_test_py = PolynomialFeatures(degree=2).fit_transform(X_test)
poly = linear_model.LinearRegression()                                        #???????????????????????/

# 多項式迴歸 + Lasso迴歸，除以下參數設定外，其餘為預設值
# #########################################################################
# alpha=10
# #########################################################################
# TODO                                                                        #7777777777777777777777777777多項式迴歸 + Lasso迴歸
lasso = linear_model.Lasso(alpha=10)

name_list = ['複迴歸', '脊迴歸', '多項式迴歸', '多項式迴歸 + Lasso迴歸']
model_list = [multi, ridge, poly, lasso]
from sklearn.metrics import mean_squared_error  # 匯入評估指標：RMSE

model = multi
multi.fit(X_train, y_train)
adj_train1_r2 = adj_R2(model.score(X_train, y_train), X_train.shape[0], X_train.shape[1])        #????????????????????//
RMSE1 = (mean_squared_error(y_test, model.predict(X_test)))**0.5
adj_test1_r2 = adj_R2(model.score(X_test, y_test), X_test.shape[0], X_test.shape[1])
print("name(0)\n\t")   

model = ridge
ridge.fit(X_train, y_train)
adj_train2_r2 = adj_R2(model.score(X_train, y_train), X_train.shape[0], X_train.shape[1])   #這一行 其實就是 R²（R-squared），跟你用：r2_score(y_train, y_train_pred)同
RMSE2 = (mean_squared_error(y_test, model.predict(X_test)))**0.5
adj_test2_r2 = adj_R2(model.score(X_test, y_test), X_test.shape[0], X_test.shape[1])

model = poly
poly.fit(X_train_py, y_train)
adj_train3_r2 = adj_R2(model.score(X_train_py, y_train), X_train_py.shape[0], X_train.shape[1])
RMSE3 = (mean_squared_error(y_test, model.predict(X_test_py)))**0.5
adj_test3_r2 = adj_R2(model.score(X_test_py, y_test), X_test_py.shape[0], X_test_py.shape[1])

model =  lasso
lasso.fit(X_train, y_train)
adj_train4_r2 = adj_R2(model.score(X_train, y_train), X_train.shape[0], X_train.shape[1])   #這一行 其實就是 R²（R-squared），跟你用：r2_score(y_train, y_train_pred)同
RMSE4 = (mean_squared_error(y_test, model.predict(X_test)))**0.5
adj_test4_r2 = adj_R2(model.score(X_test, y_test), X_test.shape[0], X_test.shape[1])

evaluation = pd.DataFrame({
    'Model': model_list,
    'adj. R2 (train)': [adj_train1_r2 , adj_train2_r2 , adj_train3_r2, adj_train4_r2 ],
    'adj. R2 (test)': [adj_test1_r2, adj_test2_r2, adj_test3_r2,adj_test4_r2],
    'RMSE (test)': [RMSE1, RMSE2, RMSE3,RMSE4]
    #'RMSE (test)': [rmse_test1, rmse_test2, rmse_test3]
})



print('對訓練集的最大 Adjusted R-squared: %.4f' % max(evaluation['adj. R2 (train)']))
print('對測試集的最小 RMSE:%d' % min(evaluation['RMSE (test)']))
print('兩個模型對測試集的最大 Adjusted R-squared: %.4f' % 
      max(evaluation.loc[:1, 'adj. R2 (test)']))

''' 預測 '''
# 利用所有資料重新擬合模型，並進行預測
# TODO


#features= ['土地面積', '建物總面積', '屋齡', '樓層', '總樓層', '用途', 
#           '房數', '廳數', '衛數', '電梯', '車位類別', 
#           '行政區_信義區', '行政區_大安區', '行政區_文山區','行政區_松山區']

# TODO
# 使用所有資料重新訓練多項式+Lasso模型
X_py = PolynomialFeatures(degree=2).fit_transform(X)
lasso.fit(X_py, y)

# 建立新樣本進行預測，欄位順序需與特徵相同
inp = pd.DataFrame([[36, 99, 32, 4, 4, 0, 3, 2, 1, 0, 0, 0, 0, 0, 1]])
inp = PolynomialFeatures(degree=2).fit_transform(inp)

# 預測新資料的總價
print(f"預測房價: {lasso.predict(inp)[0]:.0f}")



########results
'''
Index(['行政區', '土地面積', '建物總面積', '屋齡', '樓層', '總樓層', '用途', '房數', '廳數', '衛數', '電梯',
       '車位類別', '交易日期', '經度', '緯度', '總價'],
      dtype='object')
name(0)
	
對訓練集的最大 Adjusted R-squared: 0.9261
對測試集的最小 RMSE:807
兩個模型對測試集的最大 Adjusted R-squared: 0.8046
預測房價: 1546
'''





